# Rows before missing value removal
original_nrows <- nrow(data)
cat('Number of rows before missing data removal: ', original_nrows, '\n')
# Missing Value Removal
data <- data <- data[!apply(data, 1, function(row) any(row %in% c(97, 98, 99))), ]
# Drop SEX and PATIENT_TYPE
data <- data[,!names(data) %in% c("SEX", "PATIENT_TYPE")]
# Rows after missing value removal
new_nrows <- nrow(data)
cat('Number of rows after data removal: ', new_nrows, '\n')
# Rows removed
removed <- original_nrows - new_nrows
cat('Number of observations removed: ', removed, '\n')
library(dplyr)
library(tidyverse)
library(MASS)
library(ggpubr)
library(caret)
data <- read_csv('Covid Data.csv')
head(data)
# If DATE_DIED not 9999-99-99, patient did not die
data$DIED <- ifelse(data$DATE_DIED != '9999-99-99', 1, 0)
data$DIED <- as.factor(data$DIED)
# Drop date died
data <- data[,!names(data) %in% c("DATE_DIED", "USMER")]
# Rows before missing value removal
original_nrows <- nrow(data)
cat('Number of rows before missing data removal: ', original_nrows, '\n')
# Missing Value Removal
data <- data <- data[!apply(data, 1, function(row) any(row %in% c(97, 98, 99))), ]
# Drop SEX and PATIENT_TYPE
data <- data[,!names(data) %in% c("SEX", "PATIENT_TYPE")]
# Rows after missing value removal
new_nrows <- nrow(data)
cat('Number of rows after data removal: ', new_nrows, '\n')
# Rows removed
removed <- original_nrows - new_nrows
cat('Number of observations removed: ', removed, '\n')
library(dplyr)
library(tidyverse)
library(MASS)
library(ggpubr)
library(caret)
data <- read_csv('Covid Data.csv')
head(data)
# If DATE_DIED not 9999-99-99, patient did not die
data$DIED <- ifelse(data$DATE_DIED != '9999-99-99', 1, 0)
data$DIED <- as.factor(data$DIED)
# Drop date died
data <- data[,!names(data) %in% c("DATE_DIED", "USMER")]
# Rows before missing value removal
original_nrows <- nrow(data)
cat('Number of rows before missing data removal: ', original_nrows, '\n')
# Missing Value Removal
data <- data <- data[!apply(data, 1, function(row) any(row %in% c(97, 98, 99))), ]
# Drop varaibles
data <- data[,!names(data) %in% c("SEX", "PATIENT_TYPE", "CLASSIFICATION_FINAL")]
# Rows after missing value removal
new_nrows <- nrow(data)
cat('Number of rows after data removal: ', new_nrows, '\n')
# Rows removed
removed <- original_nrows - new_nrows
cat('Number of observations removed: ', removed, '\n')
# Convert necessary variables to factor
data$PNEUMONIA <- as.factor(data$PNEUMONIA)
data$PREGNANT <- as.factor(data$PREGNANT)
data$DIABETES <- as.factor(data$DIABETES)
data$COPD <- as.factor(data$COPD)
data$ASTHMA <- as.factor(data$ASTHMA)
data$INMSUPR <- as.factor(data$INMSUPR)
data$HIPERTENSION <- as.factor(data$HIPERTENSION)
data$CARDIOVASCULAR <- as.factor(data$CARDIOVASCULAR)
data$RENAL_CHRONIC <- as.factor(data$RENAL_CHRONIC)
data$OTHER_DISEASE <- as.factor(data$OTHER_DISEASE)
data$OBESITY <- as.factor(data$OBESITY)
data$TOBACCO <- as.factor(data$TOBACCO)
#data$USMER < as.factor(data$USMER)
data$MEDICAL_UNIT <- as.factor(data$MEDICAL_UNIT)
data$INTUBED <- as.factor(data$INTUBED)
data$ICU <- as.factor(data$ICU)
str(data)
# Normality of continuous variables
ggqqplot(data$AGE)
# Normality of continuous variables
shapiro.test(sample(data$AGE,size=5000))
# Calculate VIF
multi_col_model <- lm(DIED ~ ., data = data)
vif(multi_col_model)
library(dplyr)
library(tidyverse)
library(MASS)
library(ggpubr)
library(caret)
# Calculate VIF
multi_col_model <- lm(DIED ~ ., data = data)
vif(multi_col_model)
# Calculate VIF
multi_col_model <- lm(DIED ~ ., data = data)
VIF(multi_col_model)
data <- data[,!names(data) %in% c("USMER", "CLASIFFICATION_FINAL")]
# IN THIS SECTION THE FULL MODEL IS FIT
# Set the seed
set.seed(1)
# Fit the LDA model
lda_model <- lda(DIED ~ ., data = data)
# Make predictions
lda_predictions <- predict(lda_model)
# Confusion matrix
lda_conf <- table(Predicted = lda_predictions$class, Actual = data$DIED)
lda_conf
# Set the seed
set.seed(1)
# Fit the LDA model
qda_model <- qda(DIED ~ ., data = data)
# IN THIS SECTION THE FULL MODEL IS FIT
# Set the seed
set.seed(1)
# Fit the LDA model
lda_model <- lda(DIED ~ ., data = data)
# Make predictions
lda_predictions <- predict(lda_model)
# Confusion matrix
lda_conf <- table(Predicted = lda_predictions$class, Actual = data$DIED)
lda_conf
str(data)
# Calculate VIF
multi_col_model <- lm(DIED ~ ., data = data)
vif(multi_col_model)
# Calculate VIF
multi_col_model <- lm(DIED ~ ., data = data)
vif(multi_col_model)
# Calculate VIF
library(car)
multi_col_model <- lm(DIED ~ ., data = data)
vif(multi_col_model)
# Set the seed
set.seed(1)
# Fit the LDA model
qda_model <- qda(DIED ~ ., data = data)
library(caret)
nzv <- nearZeroVar(data, saveMetrics = TRUE)
nzv
near_zero
library(caret)
near_zero <- nearZeroVar(data, saveMetrics = TRUE)
near_zero
near_zero$nzv==TRUE
near_zero <- [,near_zero$nzv==TRUE]
library(caret)
near_zero_var <- nearZeroVar(data, saveMetrics = TRUE)
near_zero_var <- rownames(near_zero_var(near_zero_var[$near_zero_var$nzv == TRUE,))
library(caret)
near_zero_var <- nearZeroVar(data, saveMetrics = TRUE)
near_zero_var <- rownames(near_zero_var(near_zero_var[near_zero_var$nzv == TRUE,))
library(caret)
near_zero_var <- nearZeroVar(data, saveMetrics = TRUE)
near_zero_var <- rownames(near_zero_var[near_zero_var$nzv == TRUE,)
library(caret)
near_zero_var <- nearZeroVar(data, saveMetrics = TRUE)
near_zero_var <- rownames(near_zero_var[near_zero_var$nzv == TRUE,])
near_zero_var
data <- data[,!names(data) %in% c("USMER", "CLASIFFICATION_FINAL", "PREGNANT", "COPD", "ATHMA", "ANMSUPR", "TOBACCO")]
str(data)
data <- data[,!names(data) %in% c("MEDICAL_UNIT", "USMER", "CLASIFFICATION_FINAL", "PREGNANT", "COPD", "ATHMA", "ANMSUPR", "TOBACCO")]
str(data)
# THIS SECTION IS NOT WORKING; I IGNORE IT AND FIT THE FULL MODEL INSTEAD
# Set the seed
set.seed(1)
# Create full model for lda
full_model <- lda(DIED ~ ., data = data)
# Create null model for lda --> Using 'AGE' instead of '1' to avoid error.
null_model <- lda(DIED ~ AGE, data = data)
# Define the scope
scope <- list(lower = null_model, upper = full_model)
# Stepwise selection
lda_stepwise <- step(full_model, scope = scope, direction = "both")
# IN THIS SECTION THE FULL MODEL IS FIT
# Set the seed
set.seed(1)
# Fit the LDA model
lda_model <- lda(DIED ~ ., data = data)
# Make predictions
lda_predictions <- predict(lda_model)
# Confusion matrix
lda_conf <- table(Predicted = lda_predictions$class, Actual = data$DIED)
lda_conf
str(data)
# Set the seed
set.seed(1)
# Fit the LDA model
qda_model <- qda(DIED ~ ., data = data)
# Make predictions
qda_predictions <- predict(qda_model)
# Confusion matrix
qda_conf <- table(Predicted = qda_predictions$class, Actual = data$DIED)
qda_conf
n <- nrow(data)
# Train test split
tts <- rep(0:1,c(round(n*.3), n-round(n*.3)))
tts
sample(tts)
table(tts)
# Establish n
n <- nrow(data)
# Train test split
tts <- rep(0:1,c(round(n*.3), n-round(n*.3)))
# Get the TTS Split
tts.split <- sample(tts, n)
# Visualize the split (0 = Testing, 1 = Training)
table(tts.split)
# Establish training and testing data
training_data <- data[tts.split==1, ]
testing_data <- data[tts.split==0, ]
library(car)
# Fit the LDA and QDA model on the training data
lda_model_training <- lda(DIED ~ ., data = training_data)
qda_model_training <- lda(DIED ~ ., data = testing_data)
# Make predictions on testing data
lda_model_predictions <- predict(lda_model_training, testing_data)
qda_model_predictions <- predict(lda_model_training, testing_data)
# Visuaize the tables
print("LDA MODEL")
lda_table <- table(lda_model_predictions)
# Fit the LDA and QDA model on the training data
lda_model_training <- lda(DIED ~ ., data = training_data)
qda_model_training <- lda(DIED ~ ., data = training_data)
# Make predictions on testing data
lda_model_predictions <- predict(lda_model_training, testing_data)
qda_model_predictions <- predict(lda_model_training, testing_data)
# Visuaize the tables
print("LDA MODEL")
lda_table <- table(lda_model_predictions)
# Establish training and testing data
training_data <- data[tts.split==1, ]
testing_data <- data[tts.split==0, ]
# Fit the LDA and QDA model on the training data
lda_model_training <- lda(DIED ~ ., data = training_data)
qda_model_training <- lda(DIED ~ ., data = training_data)
# Make predictions on testing data
lda_model_predictions <- predict(lda_model_training, testing_data)
qda_model_predictions <- predict(lda_model_training, testing_data)
# Visuaize the tables
print("LDA MODEL")
lda_table <- table(lda_model_predictions)
# Make predictions on testing data
lda_model_predictions <- predict(lda_model_training, testing_data)
qda_model_predictions <- predict(lda_model_training, testing_data)
# Visuaize the tables
print("LDA MODEL")
lda_table <- table(lda_model_predictions, nrow(training_data))
# Make predictions on testing data
lda_model_predictions <- predict(lda_model_training, testing_data)
qda_model_predictions <- predict(lda_model_training, testing_data)
# Visuaize the tables
print("LDA MODEL")
lda_table <- table(lda_model_predictions)
# Make predictions on testing data
lda_model_predictions <- predict(lda_model_training, testing_data)
qda_model_predictions <- predict(lda_model_training, testing_data)
lda_model_predictions
lda_model_predictions$class
lda_model_predictions
lda_model_predictions$class
# Make predictions on testing data
lda_model_predictions <- predict(lda_model_training, testing_data)$class
qda_model_predictions <- predict(lda_model_training, testing_data)$class
# Visuaize the tables
print("LDA MODEL")
lda_table <- table(predicted_deaths = lda_model_predictions, actual_deaths = testing_data$DIED)
lda_table
print("QDA MODEL")
qda_table <- table(predicted_deaths = qda_model_predictions, actual_deaths = testing_data$DIED)
qda_table
# Visuaize the tables
print("LDA MODEL")
lda_table <- table(predicted_deaths = lda_model_predictions, actual_deaths = testing_data$DIED)
lda_table
print("\n")
print("QDA MODEL")
qda_table <- table(predicted_deaths = qda_model_predictions, actual_deaths = testing_data$DIED)
qda_table
print("\n")
# Visuaize the tables
print("LDA MODEL")
lda_table <- table(predicted_deaths = lda_model_predictions, actual_deaths = testing_data$DIED)
lda_table
cat("\n")
print("QDA MODEL")
qda_table <- table(predicted_deaths = qda_model_predictions, actual_deaths = testing_data$DIED)
qda_table
cat("\n")
# Fit the LDA and QDA model on the training data
lda_model_training <- lda(DIED ~ ., data = training_data)
qda_model_training <- qda(DIED ~ ., data = training_data)
# Make predictions on testing data
lda_model_predictions <- predict(lda_model_training, testing_data)$class
qda_model_predictions <- predict(qda_model_training, testing_data)$class
# Visuaize the tables
print("LDA MODEL")
lda_table <- table(predicted_deaths = lda_model_predictions, actual_deaths = testing_data$DIED)
lda_table
cat("\n")
print("QDA MODEL")
qda_table <- table(predicted_deaths = qda_model_predictions, actual_deaths = testing_data$DIED)
qda_table
cat("\n")
# Visuaize the tables
print("LDA MODEL")
lda_conf <- table(predicted_deaths = lda_model_predictions, actual_deaths = testing_data$DIED)
lda_conf
cat("\n")
print("QDA MODEL")
qda_conf <- table(predicted_deaths = qda_model_predictions, actual_deaths = testing_data$DIED)
qda_conf
cat("\n")
# Establish training and testing data
training_data <- data[tts.split==1, ]
testing_data <- data[tts.split==0, ]
# Fit the LDA and QDA model on the training data
lda_model <- lda(DIED ~ ., data = training_data)
qda_model <- qda(DIED ~ ., data = training_data)
# Make predictions on testing data
lda_model_predictions <- predict(lda_model, testing_data)$class
qda_model_predictions <- predict(qda_model, testing_data)$class
# Visuaize the tables
print("LDA MODEL")
lda_conf <- table(predicted_deaths = lda_model_predictions, actual_deaths = testing_data$DIED)
lda_conf
cat("\n")
print("QDA MODEL")
qda_conf <- table(predicted_deaths = qda_model_predictions, actual_deaths = testing_data$DIED)
qda_conf
cat("\n")
summary(lda_model)
summary(lda_model$class)
lda_conf[1,1]
lda_true_negatives <- lda_conf[1,1]
lda_tp <- lda_conf[1,2]
lda_fn <- lda_conf[1,2]
lda_fn <- lda_conf[1,2]
lda_tn <- lda_conf[1,1]
lda_fn <- lda_conf[1,2]
lda_fp <- lda_conf[2,1]
lda_tp <- lda_conf[2,2]
# Get accuracy for LDA
lda_accuracy <- sum(lda_tp + lda_tn)/sum(lda_tn + lda_fn + lda_fp + lda_tp)
# Get metrics for LDA
lda_tn <- lda_conf[1,1]
lda_fn <- lda_conf[1,2]
lda_fp <- lda_conf[2,1]
lda_tp <- lda_conf[2,2]
# Get metrics for QDA
qda_tn <- qda_conf[1,1]
qda_fn <- qda_conf[1,2]
qda_fp <- qda_conf[2,1]
qda_tp <- qda_conf[2,2]
# Get accuracy for LDA
lda_accuracy <- sum(lda_tp + lda_tn) / sum(lda_tn + lda_fn + lda_fp + lda_tp)
# Get accuracy for QDA
qda_accuracy <- sum(qda_tp + qda_tn) / sum(qda_tn + qda_fn + qda_fp + qda_tp)
# Print
cat('LDA ACCURACY: ', lda_accuracy, '\n')
cat('QDA ACCURACY: ', qda_accuracy, '\n')
# Get metrics for LDA
lda_tn <- lda_conf[1,1]
lda_fn <- lda_conf[1,2]
lda_fp <- lda_conf[2,1]
lda_tp <- lda_conf[2,2]
# Get metrics for QDA
qda_tn <- qda_conf[1,1]
qda_fn <- qda_conf[1,2]
qda_fp <- qda_conf[2,1]
qda_tp <- qda_conf[2,2]
# Get accuracy for LDA
lda_accuracy <- sum(lda_tp + lda_tn) / sum(lda_tn + lda_fn + lda_fp + lda_tp)
# Get accuracy for QDA
qda_accuracy <- sum(qda_tp + qda_tn) / sum(qda_tn + qda_fn + qda_fp + qda_tp)
# Print
cat('LDA ACCURACY: ', lda_accuracy, '\n')
cat('QDA ACCURACY: ', qda_accuracy, '\n')
# Get metrics for LDA
lda_tn <- lda_conf[1,1]
lda_fn <- lda_conf[1,2]
lda_fp <- lda_conf[2,1]
lda_tp <- lda_conf[2,2]
# Get metrics for QDA
qda_tn <- qda_conf[1,1]
qda_fn <- qda_conf[1,2]
qda_fp <- qda_conf[2,1]
qda_tp <- qda_conf[2,2]
# Get accuracy for LDA
lda_accuracy <- sum(lda_tp + lda_tn) / sum(lda_tn + lda_fn + lda_fp + lda_tp)
# Get accuracy for QDA
qda_accuracy <- sum(qda_tp + qda_tn) / sum(qda_tn + qda_fn + qda_fp + qda_tp)
# Get recall for LDA
lda_recall <- lda_tp / sum(lda_tp, lda_fp)
# Get recall for QDA
qda_recall <- qda_tp / sum(qda_tp, qda_fp)
# Get precision for LDA
lda_precision <- lda_tp / sum(lda_tp, lda_fp)
# Get precision for QDA
qda_precision <- qda_tp / sum(qda_tp , lda_fp)
# Print
cat('LDA ACCURACY: ', lda_accuracy, '\n')
cat('QDA ACCURACY: ', qda_accuracy, '\n')
cat('\n')
cat('LDA RECALL: ', lda_recall, '\n')
cat('QDA RECALL: ', qda_recall, '\n')
cat('\n')
cat('LDA PRECISION: ', lda_precision, '\n')
cat('QDA PRECISION: ', qda_precision, '\n')
cat('\n')
# Defining Prediction Label
prediction_label <- ifelse(lda_model_predictions > 0.5, 1, 0)
# ROC Curve
roc <- roc(testing_data$DIED, prediction_label)
library(dplyr)
library(tidyverse)
library(MASS)
library(ggpubr)
library(caret)
library(car)
library(pROC)
# Defining Prediction Label
prediction_label <- ifelse(lda_model_predictions > 0.5, 1, 0)
# ROC Curve
roc <- roc(testing_data$DIED, prediction_label)
# ROC Curve Step 1: Get probabilities for positive class
lda_probabilities <- lda_model_predictions$posterior[,2]
# Defining Prediction Label
prediction_label <- ifelse(lda_model_predictions > 0.5, 1, 0)
# Fix lda_model_predictions variable
lda_model_predictions <- predict(lda_model, testing_data)
# ROC Curve Step 1: Get probabilities for positive class
lda_probabilities <- lda_model_predictions$posterior[,2]
# Cutoff
cutoff <- 0.5
# Defining Prediction Label
prediction_label <- ifelse(lda_model_predictions > cutoff, 1, 0)
# Cutoff
cutoff <- 0.5
# Defining Prediction Label
prediction_label <- ifelse(lda_model_predictions > cutoff, 1, 0)
# Cutoff
cutoff <- 0.5
# Defining Prediction Label
prediction_label <- ifelse(lda_model_predictions > cutoff, 1, 0)
# Cutoff
cutoff <- 0.5
# Defining Prediction Label
#prediction_label <- ifelse(lda_model_predictions > cutoff, 1, 0)
# Fix lda_model_predictions variable
lda_model_predictions <- predict(lda_model, testing_data)
# ROC Curve Step 1: Get probabilities for positive class
lda_probabilities <- lda_model_predictions$posterior[,2]
# ROC Curve Step 2: Create ROC curve
lda_roc <- roc(testing_data$DIED, lda_probabilities)
# ROC Curve Step 3: Create dataframe with columns tpr and fpr
lda_roc_df <- data.frame(tpr = lda_roc$sensitivities, fpr = 1 - lda_roc$specificities)
# ROC Curve Step 4: Graph
ggplot(roc_lda_df, aes(x = fpr, y = tpr)) +
geom_line() +
labs(title = "ROC Curve for LDA Model",
x = "False Positive Rate",
y = "True Positive Rate") +
geom_abline(slope = 1, intercept = 0, linetype = "dashed")
# Cutoff
cutoff <- 0.5
# Defining Prediction Label
#prediction_label <- ifelse(lda_model_predictions > cutoff, 1, 0)
# Fix lda_model_predictions variable
lda_model_predictions <- predict(lda_model, testing_data)
# ROC Curve Step 1: Get probabilities for positive class
lda_probabilities <- lda_model_predictions$posterior[,2]
# ROC Curve Step 2: Create ROC curve
lda_roc <- roc(testing_data$DIED, lda_probabilities)
# ROC Curve Step 3: Create dataframe with columns tpr and fpr
lda_roc_df <- data.frame(tpr = lda_roc$sensitivities, fpr = 1 - lda_roc$specificities)
# ROC Curve Step 4: Graph
ggplot(lda_roc_df, aes(x = fpr, y = tpr)) +
geom_line() +
labs(title = "ROC Curve for LDA Model",
x = "False Positive Rate",
y = "True Positive Rate") +
geom_abline(slope = 1, intercept = 0, linetype = "dashed")
# Cutoff
cutoff <- 0.5
# Fix lda_model_predictions variable
lda_model_predictions <- predict(lda_model, testing_data)
# ROC Curve Step 1: Get probabilities for positive class
lda_probabilities <- lda_model_predictions$posterior[,2]
# ROC Curve Step 2: Create ROC curve
lda_roc <- roc(testing_data$DIED, lda_probabilities)
# ROC Curve Step 3: Create dataframe with columns tpr and fpr
lda_roc_df <- data.frame(tpr = lda_roc$sensitivities, fpr = 1 - lda_roc$specificities)
# ROC Curve Step 4: Graph
ggplot(lda_roc_df, aes(x = fpr, y = tpr)) +
geom_line(color = 'blue') +
labs(title = "ROC Curve for LDA Model",
x = "False Positive Rate",
y = "True Positive Rate") +
geom_abline(slope = 1, intercept = 0, linetype = "dashed")
# Area under curve computation
aoc(lda_roc)
# Area under curve computation
auc(lda_roc)
summary(lda_model)
lda_model$scaling
lda_model$scaling
str(lda_model)
# Printing the coefficients of the model
lda_model$scaling
